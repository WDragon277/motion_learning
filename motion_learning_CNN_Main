#텐서플로 워크프레임 적용
#배열 사용을 위한 넘파이 적용
import tensorflow as tf
import numpy as np
from keras.preprocessing import image
import matplotlib.pyplot as pyplot
from keras.preprocessing.image import ImageDataGenerator

from keras import layers
from keras import models

model = models.Sequential()
model.add(layers.Conv2D(32,(7,7),activation='relu',
                                                input_shape=(430,180,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64,(7,7),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128,(7,7),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128,(7,7),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))

model.add(layers.Flatten())
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(4, activation='softmax'))

model.summary
########

from keras import optimizers
model.compile(loss = 'categorical_crossentropy',
            optimizer = optimizers.SGD(lr=0.005),#lr=학습률
            metrics = ['acc'])

#################
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

#x_train,y_train(훈련이미지, 훈련라벨)

train_generator = train_datagen.flow_from_directory(
'C:\\Users\\0614_\\Desktop\\root\\train',
target_size=(430,180),
    batch_size = 20,
    class_mode='categorical')


#x_test,y_test(검증이미지, 검증라벨)

validation_generator = test_datagen.flow_from_directory(
    'C:\\Users\\0614_\\Desktop\\root\\test',
    target_size=(430,180),
    batch_size=20,
    class_mode='categorical'
)

for data_batch, labels_batch in train_generator :
    print('배치 데이터 크기', data_batch.shape)
    print('배치 레이블 크기', labels_batch.shape)
    break


####################

history = model.fit_generator(
    train_generator,
    steps_per_epoch=106,
    epochs=50,
    validation_data = validation_generator,
    validation_steps=26)

############
model.save('Motion Classify CNN_small_1.h5')

############## 결과 그래프 그리기 
import matplotlib.pyplot as plt


acc = history.history['acc']
vall_acc = history.history['val_acc']
loss = history.history['loss']
vall_loss = history.history['val_loss']

epochs = range(1, len(acc) +1)

plt.plot(epochs, acc, 'bo', label='Trainging acc')
plt.plot(epochs, vall_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Trainging loss')
plt.plot(epochs, vall_acc, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

##########


print("-- Evaluate --")
STEP_SIZE_VALID = validation_generator.n // validation_generator.batch_size
scores = model.evaluate_generator(generator=validation_generator, steps=STEP_SIZE_VALID)
print("%s: %.2f%%" %(model.metrics_names[1], scores[1]*100))

#Confusion Matrix and Classification Report

np.set_printoptions(precision=2)

validation_generator.reset()
Y_pred = model.predict_generator(validation_generator, STEP_SIZE_VALID+1)#validation_generator.n // validation_generator.batch_size+1)
classes = validation_generator.classes[validation_generator.index_array]
y_pred = np.argmax(Y_pred, axis=-1)  # Returns maximum indices in each row
print(sum(y_pred==classes)/10000)

class_names = ['Birddog', 'Bridge', 'Cobra', 'Waist-st']  # Alphanumeric order 영문순서

print('-- Confusion Matrix --')
print(confusion_matrix(validation_generator.classes[validation_generator.index_array], y_pred))

# Plot non-normalized confusion matrix
plot_confusion_matrix(validation_generator.classes[validation_generator.index_array], y_pred, classes=class_names, title='Confusion matrix, without normalization')
# Plot normalized confusion matrix
plot_confusion_matrix(validation_generator.classes[validation_generator.index_array], y_pred, classes=class_names, normalize=True, title='Normalized confusion matrix')

plt.show()

print('-- Classification Report --')
print(classification_report(validation_generator.classes[validation_generator.index_array], y_pred, target_names=class_names))
